if isempty(gcp('nocreate'))
    parpool;                         
end

cohorts = { ...
    ControlVariables,   'Controls',   'C_ctrl'; ...
    EpilepsyVariables,  'Resective',  'C_res';  ...
    VnsVariables,       'VNS',        'C_vns'    };

for c = 1:size(cohorts,1)
    S      = cohorts{c,1};        
    label  = cohorts{c,2};         
    outVar = cohorts{c,3};         
    
    N = numel(S);
    matField = fieldnames(S); matField = matField{1};  

    fprintf('[%s] computing mean clustering coefficient for %d subjects:\n', ...
            label, N);

    C = zeros(N,1);              
    dq = parallel.pool.DataQueue; 
    afterEach(dq, @(~) fprintf('.'));  
    
    parfor k = 1:N
        % 1) log-normalise
        W  = log1p( S(k).(matField) );
        % 2) rescale to 0–1
        mx = max(W(:));  if mx>0,  W = W ./ mx;  end
        % 3) nodal clustering, then mean across 253 nodes
        C(k) = mean( clustering_coef_wu(W), 'omitnan' );
        send(dq,1);               
    end
    fprintf(' done.\n\n');
    
    assignin('base', outVar, C);   
end

fprintf('Mean Clustering Coefficient (log1p & scaled 0–1)\n');
fprintf('  Controls   : %.4f ± %.4f   (n = %d)\n', ...
        mean(C_ctrl), std(C_ctrl), numel(C_ctrl));
fprintf('  Resective  : %.4f ± %.4f   (n = %d)\n', ...
        mean(C_res ), std(C_res ), numel(C_res ));
fprintf('  VNS        : %.4f ± %.4f   (n = %d)\n', ...
        mean(C_vns ), std(C_vns ), numel(C_vns));
